for package.json remember it’s just a JSON file, which means it’s defining a JavaScript object, which has keys or properties or attributes or even elements – all these terms are generally taken to be interchangeable

NPM Othor Commands:
1.Auditing Package Security
npm audit
Running this command will scan your package.json file (or global packages if you use -g) and submit the list of dependencies to the default NPM registry requesting a report on any known vulnerabilities in them. This report will also include information on how to remediate. But, if you want the quick answer, execute this command:
npm audit fix
That will cause NPM to update any vulnerable packages with the newest available version that hasn’t had the vulnerability reported in it.
If you’d like to see a detailed audit report, execute
npm audit --json
or, if you prefer plain text
npm audit --readable
Finally, if you’d like to see what npm audit fix would do but without literally doing
it, you can use
npm audit fix --dry-run
2.Deduplication and Pruning
npm dedup
The dedup command searches through the tree of packages in node_modules and looks for opportunities where packages can be moved up the tree and shared between dependencies, thereby reducing redundancy and saving space. The package tree is built up as you install packages and as NPM installs the packages, it depends on, and so on. Sometimes, packages will have dependencies in common, but being a tree, branches (read: packages) are mostly independent. This command attempts to reorganize those branches to make it more efficient.
npm prune
his command will examine the installed packages and look for any that may no longer be needed. This typically happens when you uninstall packages and especially if you’ve done a dedup at some point. Any package that is not listed in the parent package’s dependency list is considered “extraneous” and therefore subject to being pruned.

3.npm search
4.npm update

5.Publishing/Unpublishing package
 npm login
This will prompt you for your username, password, and eMail address. Once you’re logged in, publishing is a snap:
 npm publish
As long as you’re in your package’s root directory (the one you ran npm init in and
that now has your package.json file), it will be published.
your package name could already be taken. It’s always a good idea to do an npm search for the name first, but assuming the name isn’t taken (or you’ve changed it after discovering a collision), then it’ll be published and available in the registry immediately.
If the name you really want isn’t available, npM also lets you publish to a scope. this means, for example, you can change the name to @<username>/<package- name>(ordonpm init --scope=<username>).You’llthenalsoneedtoadd --access publictothepublishcommand.thatway,aslongasyourpackage name is unique within the scope, then you’re good to go; the name can be used in other scopes without issue (and no scope is effectively the default scope!). so, if, like domain names, the one you want is taken, there’s a way around it in npM land.
If you for some reason down the line decide you need to remove your package from the registry, it’s as simple as
 npm unpublish [<@scope>/]<package-name>[@<version>]
If you don’t specify a version, then all versions will be removed.
Two important notes here: First, removing a package is generally considered bad form because others may be depending on it. The better thing to do is to use another command: deprecate. That will mark your package as deprecated, optionally applying a message you can specify about what happens. Second, it’s essential to understand that even if you unpublish a package, the name and/or name-plus-version combination can never be reused. So again, if you want to be a good citizen, it’s best not to unpublish but instead deprecate the package (better still not to publish something you later have to remove or deprecate – but it happens, so NPM has you covered in either case with these two commands).




File Systems (fs)
To use this module, you’ll need to require() it:
 const fs = require("fs");
this modelue offers:
fs.copyFile()
fs.readFile()
fs.unlink()
fs.mkdir()
fs.stat()
fs.readdir()


HTTP and HTTPS (http and https)
The only real difference is some extra information about certificates and keys that you must provide when constructing the server:
const fs = require("fs");
const server = require("https").createServer(
  {
    key : fs.readFileSync("my_key.pem"),
    cert : fs.readFileSync("my_cert.pem")
}, (inRequest, inResponse) => {
  inResponse.writeHead(200);
  inResponse.end("I am protected by TLS!");
}).listen(443);

ut the HTTP and HTTPS modules aren’t just about servers: they also provide the means for your Node-based code to make HTTP requests


OS (os)

Path (path)

Query Strings

URL (url)

Utilities


In this chapter, we delved into just a little more detail on Node and NPM, talking about package.json in more detail, some other NPM commands you might need, and we took a look at the standard libraries that ship with Node, at least those that I believe most developers would find of most significant interest.
